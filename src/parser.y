%debug
%defines
%locations

%{

#include "ast/ast.h"
#include "import/import.h"

#include "common.h"
#include "scanner.h"
#include "memory.h"
#include "errors.h"

FILE* outfile = NULL;
extern const char* file_name;

Module* module = NULL;

%}

%union {
    char* str;
    char* symbol;
    double num;
    int type;
    int scope;

    /* These union objects are generated from boilerplate. */
};

%token BREAK CASE CONTINUE CONST DEFAULT
%token DO ELSE FOR IF RETURN SWITCH IMPORT
%token NAMESPACE CLASS STRUCT WHILE
%token TRUE FALSE IN YIELD EXIT
%token EQU NEQU LORE GORE OR AND
%token TRY EXCEPT RAISE CTOR DTOR
%token ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN
%token INCREMENT DECREMENT NOT

%token<type> NUMBER NOTHING STRING LIST DICT BOOLEAN PRINT TRACE TYPE
%token<scope> PUBLIC PRIVATE PROTECTED
%token<symbol> SYMBOL
%token<num> NUM
%token<str> STRG

    /* token list automatically generated by boilerplate */

%define parse.error verbose
%locations

%right '='
%right ADD_ASSIGN SUB_ASSIGN
%right MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN
%left CAST
%left OR
%left AND
%left EQU NEQU
%left LORE GORE '<' '>'
%left '+' '-'
%left '*' '/' '%'
%left NEGATE

%%

module
    : module_list {}
    ;

module_list
    : module_item {}
    | module_list module_item {}
    ;

compound_name
    : SYMBOL {}
    | compound_name '.' SYMBOL {}
    ;

scope_operator
    : PRIVATE {}
    | PUBLIC {}
    | PROTECTED {}
    ;

type_definition
    : NUMBER {}
    | STRING {}
    | BOOLEAN {}
    | NOTHING {}
    | compound_name {}
    ;

constant_expression
    : NUM {}
    | TRUE {}
    | FALSE {}
    | STRG {}
    ;

    /* Lists and dicts can be limited to a specific type. Without the cast
       any type can be store in the list. This is a semantic distinction but
       only lists and dicts are syntactically correct. */
symbol_type
    : type_definition SYMBOL {}
    | LIST SYMBOL {}
    | DICT SYMBOL {}
    | LIST cast_specifier SYMBOL {}
    | DICT cast_specifier SYMBOL {}
    ;

cast_specifier
    : type_definition '@' {}
    ;

compound_name_in_parens_rule
    : '(' compound_name ')' {}
    ;

array_reference
    : compound_name array_parameter_list {}
    ;

    /* A generic name can have a function or an array reference in it. This is
       not currently supported in the parser. */
expression_factor
    : constant_expression {}
    | compound_name {}
    | array_reference {}
    | func_reference {}
    ;

expression
    : expression_factor {}
    | expression '+' expression {}
    | expression '-' expression {}
    | expression '*' expression {}
    | expression '/' expression {}
    | expression '%' expression {}
    | expression EQU expression {}
    | expression NEQU expression {}
    | expression LORE expression {}
    | expression GORE expression {}
    | expression OR expression {}
    | expression AND expression {}
    | expression '<' expression {}
    | expression '>' expression {}
    | expression ADD_ASSIGN expression {}
    | expression SUB_ASSIGN expression {}
    | expression MUL_ASSIGN expression {}
    | expression DIV_ASSIGN expression {}
    | expression MOD_ASSIGN expression {}
    | '-' expression %prec NEGATE {}
    | NOT expression %prec NEGATE {}
    |  cast_specifier expression %prec CAST {}
    | expression_in_parens_rule {}
    ;

expression_list
    : expression {}
    | expression_list ',' expression {}
    ;

expression_in_parens_rule
    : '(' expression ')' {}
    | empty_parens_rule {}
    ;

expression_list_in_parens
    : '(' expression_list ')' {}
    | empty_parens_rule {}
    ;

func_reference
    : compound_name expression_list_in_parens {}
    ;

namespace_definition
    : NAMESPACE SYMBOL '{' module_list '}' {}
    | NAMESPACE SYMBOL '{' '}' {}
    ;

class_name_parent
    : /* EMPTY */ {}
    | compound_name_in_parens_rule {}
    | empty_parens_rule {}
    ;

class_name
    : CLASS SYMBOL class_name_parent {}
    ;

class_definition
    : class_name'{' class_definition_list '}' {}
    | class_name '{' '}' {}
    ;

class_definition_list
    : class_definition_item {}
    | class_definition_list class_definition_item {}
    ;

empty_parens_rule
    : '(' ')' {}
    ;

func_decl_parameter_list
    : '(' parameter_decl_list ')' {}
    | empty_parens_rule {}
    ;

constructor_decl
    : CTOR func_decl_parameter_list {}
    ;

destructor_decl
    : DTOR {}
    ;

symbol_declaration
    : symbol_type {}
    | CONST symbol_type {}
    ;

struct_declaration
    : STRUCT SYMBOL '{' struct_body '}' {}
    | STRUCT SYMBOL '{' '}' {}
    ;

struct_body
    : symbol_declaration {}
    | struct_body symbol_declaration {}
    ;

method_declaration
    : type_definition SYMBOL func_decl_parameter_list {}
    ;

parameter_def_list
    : symbol_declaration {}
    | parameter_def_list ',' symbol_declaration {}
    ;

parameter_decl_element
    : type_definition {}
    | CONST type_definition {}
    ;

parameter_decl_list
    : parameter_decl_element {}
    | parameter_decl_list ',' parameter_decl_element {}
    ;

array_initializer
    : '[' expression_list ']' {}
    ;

dict_init_item
    : expression {}
    | dict_initializer {}
    | array_initializer {}
    ;

dict_init_element
    : STRG ':' dict_init_item {}
    | compound_name ':' dict_init_item {}
    ;

dict_init_list
    : dict_init_element {}
    | dict_init_list ',' dict_init_element {}
    ;

dict_initializer
    : '[' dict_init_list ']' {}
    ;

initialzer
    : expression {}
    | array_initializer {}
    | dict_initializer {}
    ;

data_definition
    : symbol_declaration {}
    | symbol_declaration '=' initialzer {}
    ;

func_def_parameter_list
    : '(' parameter_def_list ')' {}
    | '(' ')' {}
    ;

func_body_statement_list
    : func_body_statement {}
    | func_body_statement_list func_body_statement {}
    ;

func_body
    : '{' func_body_statement_list '}' {}
    | '{' '}' {}
    ;

func_definition
    : type_definition compound_name func_def_parameter_list func_body {}
    | compound_name '.' CTOR func_def_parameter_list func_body {}
    | compound_name '.' DTOR func_body {}
    ;

break_statement
    : BREAK {}
    ;

continue_statement
    : CONTINUE {}
    ;

yield_statement
    : YIELD {}
    ;

except_clause
    : EXCEPT compound_name_in_parens_rule func_body {}
    ;

except_clause_intermediate_list
    : except_clause {}
    | except_clause_intermediate_list except_clause {}
    ;

except_clause_final
    : EXCEPT empty_parens_rule func_body {}
    | EXCEPT func_body {}
    ;

except_clause_list
    : except_clause_intermediate_list {}
    | except_clause_intermediate_list except_clause_final {}
    | except_clause_final {}
    ;

try_statement
    : TRY '{' func_body_statement_list '}' except_clause_list {}
    ;

    /* conflicts with else_clause_final when using
       the expression_in_parens_rule */
else_clause
    : ELSE '(' expression ')' {} func_body {}
    ;

else_clause_intermediate_list
    : else_clause {}
    | else_clause_intermediate_list else_clause {}
    ;

else_clause_final
    : ELSE empty_parens_rule func_body {}
    | ELSE func_body {}
    ;

else_clause_list
    : else_clause_intermediate_list {}
    | else_clause_intermediate_list else_clause_final {}
    | else_clause_final {}
    ;

if_clause
    : IF expression_in_parens_rule func_body {}
    ;

if_statement
    : if_clause {}
    | if_clause else_clause_list {}
    ;

for_statement
    : FOR '(' compound_name IN expression ')' func_body {}
    | FOR empty_parens_rule func_body {}
    | FOR func_body {}
    ;

while_statement
    : WHILE expression_in_parens_rule func_body {}
    | WHILE func_body {}
    ;

case_clause
    : CASE '(' constant_expression ')' func_body {}
    ;

case_clause_intermediate_list
    : case_clause {}
    | case_clause_intermediate_list case_clause {}
    ;

case_clause_list
    : case_clause_intermediate_list  {}
    | case_clause_intermediate_list DEFAULT func_body  {}
    ;

switch_statement
    : SWITCH compound_name_in_parens_rule '{' case_clause_list '}'  {}
    ;

do_statement
    : DO func_body WHILE expression_in_parens_rule {}
    | DO func_body WHILE {}
    ;

    /* This is num for array references. Dict references have a string.
    Other kinds of values are syntax error */
array_parameter
    : '[' expression_factor ']' {}
    | '[' array_parameter ']' {}
    ;

array_parameter_list
    : array_parameter {}
    | array_parameter_list array_parameter {}
    ;

class_definition_item
    : symbol_declaration {}
    | method_declaration {}
    | struct_declaration {}
    | scope_operator {}
    | constructor_decl {}
    | destructor_decl {}
    | error {}
    ;

module_item
    : class_definition {}
    | data_definition {}
    | func_definition {}
    | namespace_definition {}
    | struct_declaration {}
    | scope_operator {}
    | IMPORT STRG { openFile($2); }
    | error {}
    ;

trace_statement
    : TRACE {}
    | TRACE '(' ')' {}
    | TRACE '(' STRG ')' {}
    ;

return_statement
    : RETURN {}
    | RETURN expression_in_parens_rule {}
    ;

print_statement
    : PRINT {}
    | PRINT expression_in_parens_rule {}
    ;

exit_statement
    : EXIT {}
    | EXIT '(' expression ')' {}
    ;

raise_statement
    : RAISE {}
    | RAISE '(' expression ')' {}
    ;

type_statement
    : TYPE '(' expression ')' {}
    ;

assignment
    : compound_name '=' initialzer {}
    | array_reference '=' initialzer {}
    ;

func_body_statement
    : data_definition {}
    | assignment {}
    | if_statement {}
    | for_statement {}
    | while_statement {}
    | switch_statement {}
    | do_statement {}
    | try_statement {}
    | func_reference {}
    | trace_statement {}
    | return_statement {}
    | print_statement {}
    | exit_statement {}
    | raise_statement {}
    | type_statement {}
    | break_statement {}
    | continue_statement {}
    | yield_statement {}
    | func_body {}
    ;

%%

void yyerror(const char* s) {

    fprintf(stderr, "%s:%d:%d %s\n", get_file_name(), get_line_no(), get_col_no(), s);
    //error("%s", s);
}

const char* tokenToStr(int tok) {

    return yysymbol_name(YYTRANSLATE(tok));
}
