%debug
%defines
%locations

%{

#include "ast/ast.h"
#include "import/import.h"

#include "common.h"
#include "scanner.h"
#include "memory.h"
#include "errors.h"

FILE* outfile = NULL;
extern const char* file_name;


%}

%union {
    char* str;
    char* symbol;
    double num;
    int type;
    int scope;

    /* These union objects are generated from boilerplate. */
    /* #include "ast/parser_union.h" */
    Module* _module_;
    ModuleList* _module_list_;
    CompoundName* _compound_name_;
    ScopeOperator* _scope_operator_;
    TypeDefinition* _type_definition_;
    ConstantExpression* _constant_expression_;
    SymbolType* _symbol_type_;
    CastSpecifier* _cast_specifier_;
    CompoundNameInParensRule* _compound_name_in_parens_rule_;
    ArrayReference* _array_reference_;
    ExpressionFactor* _expression_factor_;
    Expression* _expression_;
    ExpressionList* _expression_list_;
    ExpressionInParensRule* _expression_in_parens_rule_;
    FuncReference* _func_reference_;
    NamespaceDefinition* _namespace_definition_;
    ClassNameParent* _class_name_parent_;
    ClassName* _class_name_;
    ClassDefinition* _class_definition_;
    ClassDefinitionList* _class_definition_list_;
    EmptyParensRule* _empty_parens_rule_;
    FuncDeclParameterList* _func_decl_parameter_list_;
    ConstructorDecl* _constructor_decl_;
    DestructorDecl* _destructor_decl_;
    SymbolDeclaration* _symbol_declaration_;
    StructDeclaration* _struct_declaration_;
    StructBody* _struct_body_;
    MethodDeclaration* _method_declaration_;
    FuncDeclaration* _func_declaration_;
    ParameterDefList* _parameter_def_list_;
    ParameterDeclElement* _parameter_decl_element_;
    ParameterDeclList* _parameter_decl_list_;
    ArrayInitializer* _array_initializer_;
    DictInitItem* _dict_init_item_;
    DictInitElement* _dict_init_element_;
    DictInitList* _dict_init_list_;
    DictInitializer* _dict_initializer_;
    Initialzer* _initialzer_;
    DataDefinition* _data_definition_;
    FuncDefinitionParameterList* _func_definition_parameter_list_;
    FuncBodyStatementList* _func_body_statement_list_;
    FuncBody* _func_body_;
    FuncDefinition* _func_definition_;
    LoopBodyStatement* _loop_body_statement_;
    LoopBodyStatementList* _loop_body_statement_list_;
    LoopBody* _loop_body_;
    ExceptClause* _except_clause_;
    ExceptClauseIntermediateList* _except_clause_intermediate_list_;
    ExceptClauseFinal* _except_clause_final_;
    ExceptClauseList* _except_clause_list_;
    TryStatement* _try_statement_;
    ElseClause* _else_clause_;
    ElseClauseIntermediateList* _else_clause_intermediate_list_;
    ElseClauseFinal* _else_clause_final_;
    ElseClauseList* _else_clause_list_;
    IfClause* _if_clause_;
    IfStatement* _if_statement_;
    ForStatement* _for_statement_;
    WhileStatement* _while_statement_;
    CaseClause* _case_clause_;
    CaseClauseIntermediateList* _case_clause_intermediate_list_;
    CaseClauseList* _case_clause_list_;
    SwitchStatement* _switch_statement_;
    DoStatement* _do_statement_;
    ArrayParameter* _array_parameter_;
    ArrayParameterList* _array_parameter_list_;
    ClassDefinitionItem* _class_definition_item_;
    ModuleItem* _module_item_;
    FuncBodyStatement* _func_body_statement_;

};

%token BREAK CASE CONTINUE CONST DEFAULT
%token DO ELSE FOR IF RETURN SWITCH IMPORT
%token NAMESPACE CLASS STRUCT WHILE
%token TRUE FALSE IN YIELD EXIT
%token EQU NEQU LORE GORE OR AND
%token TRY EXCEPT RAISE CTOR DTOR
%token PRINT TRACE

%token<type> NUMBER NOTHING STRING LIST DICT BOOLEAN
%token<scope> PUBLIC PRIVATE PROTECTED
%token<symbol> SYMBOL
%token<num> NUM
%token<str> STRG

    /* token list automatically generated by boilerplate */
    /* #include "ast/parser_types.h" */
%type<_module_> module
%type<_module_list_> module_list
%type<_compound_name_> compound_name
%type<_scope_operator_> scope_operator
%type<_type_definition_> type_definition
%type<_constant_expression_> constant_expression
%type<_symbol_type_> symbol_type
%type<_cast_specifier_> cast_specifier
%type<_compound_name_in_parens_rule_> compound_name_in_parens_rule
%type<_array_reference_> array_reference
%type<_expression_factor_> expression_factor
%type<_expression_> expression
%type<_expression_list_> expression_list
%type<_expression_in_parens_rule_> expression_in_parens_rule
%type<_func_reference_> func_reference
%type<_namespace_definition_> namespace_definition
%type<_class_name_parent_> class_name_parent
%type<_class_name_> class_name
%type<_class_definition_> class_definition
%type<_class_definition_list_> class_definition_list
%type<_empty_parens_rule_> empty_parens_rule
%type<_func_decl_parameter_list_> func_decl_parameter_list
%type<_constructor_decl_> constructor_decl
%type<_destructor_decl_> destructor_decl
%type<_symbol_declaration_> symbol_declaration
%type<_struct_declaration_> struct_declaration
%type<_struct_body_> struct_body
%type<_method_declaration_> method_declaration
%type<_func_declaration_> func_declaration
%type<_parameter_def_list_> parameter_def_list
%type<_parameter_decl_element_> parameter_decl_element
%type<_parameter_decl_list_> parameter_decl_list
%type<_array_initializer_> array_initializer
%type<_dict_init_item_> dict_init_item
%type<_dict_init_element_> dict_init_element
%type<_dict_init_list_> dict_init_list
%type<_dict_initializer_> dict_initializer
%type<_initialzer_> initialzer
%type<_data_definition_> data_definition
%type<_func_definition_parameter_list_> func_definition_parameter_list
%type<_func_body_statement_list_> func_body_statement_list
%type<_func_body_> func_body
%type<_func_definition_> func_definition
%type<_loop_body_statement_> loop_body_statement
%type<_loop_body_statement_list_> loop_body_statement_list
%type<_loop_body_> loop_body
%type<_except_clause_> except_clause
%type<_except_clause_intermediate_list_> except_clause_intermediate_list
%type<_except_clause_final_> except_clause_final
%type<_except_clause_list_> except_clause_list
%type<_try_statement_> try_statement
%type<_else_clause_> else_clause
%type<_else_clause_intermediate_list_> else_clause_intermediate_list
%type<_else_clause_final_> else_clause_final
%type<_else_clause_list_> else_clause_list
%type<_if_clause_> if_clause
%type<_if_statement_> if_statement
%type<_for_statement_> for_statement
%type<_while_statement_> while_statement
%type<_case_clause_> case_clause
%type<_case_clause_intermediate_list_> case_clause_intermediate_list
%type<_case_clause_list_> case_clause_list
%type<_switch_statement_> switch_statement
%type<_do_statement_> do_statement
%type<_array_parameter_> array_parameter
%type<_array_parameter_list_> array_parameter_list
%type<_class_definition_item_> class_definition_item
%type<_module_item_> module_item
%type<_func_body_statement_> func_body_statement


%define parse.error verbose
%locations

%right '='
%left CAST
%left OR
%left AND
%left EQU NEQU
%left LORE GORE '<' '>'
%left '+' '-'
%left '*' '/' '%'
%left NEGATE

%%

module
    : module_list {}
    ;

module_list
    : module_item {}
    | module_list module_item {}
    ;

compound_name
    : SYMBOL {}
    | compound_name '.' SYMBOL {}
    ;

scope_operator
    : PRIVATE {}
    | PUBLIC {}
    | PROTECTED {}
    ;

type_definition
    : NUMBER {}
    | STRING {}
    | BOOLEAN {}
    | NOTHING {}
    | LIST {}
    | DICT {}
    | compound_name {}
    ;

constant_expression
    : NUM {}
    | TRUE {}
    | FALSE {}
    | STRG {}
    ;

symbol_type
    : type_definition SYMBOL {}
    ;

cast_specifier
    : type_definition '@' {}
    ;

compound_name_in_parens_rule
    : '(' compound_name ')' {}
    ;

array_reference
    : compound_name array_parameter_list {}
    ;

expression_factor
    : constant_expression {}
    | func_reference {}
    | compound_name {}
    | array_reference {}
    ;

expression
    : expression_factor {}
    | expression '+' expression {}
    | expression '-' expression {}
    | expression '*' expression {}
    | expression '/' expression {}
    | expression '%' expression {}
    | expression EQU expression {}
    | expression NEQU expression {}
    | expression LORE expression {}
    | expression GORE expression {}
    | expression OR expression {}
    | expression AND expression {}
    | expression '<' expression {}
    | expression '>' expression {}
    | '-' expression %prec NEGATE {}
    | '!' expression %prec NEGATE {}
    |  cast_specifier expression %prec CAST {}
    | expression_in_parens_rule {}
    ;

expression_list
    : expression {}
    | expression_list ',' expression {}
    ;

expression_in_parens_rule
    : '(' expression ')' {}
    | empty_parens_rule {}
    ;

func_reference
    : compound_name '(' expression_list ')' {}
    | compound_name '(' ')' {}
    ;

namespace_definition
    : NAMESPACE SYMBOL '{' module_list '}' {}
    | NAMESPACE SYMBOL '{' '}' {}
    ;

class_name_parent
    : /* EMPTY */ {}
    | compound_name_in_parens_rule {}
    ;

class_name
    : CLASS SYMBOL class_name_parent {}
    ;

class_definition
    : class_name'{' class_definition_list '}' {}
    | class_name '{' '}' {}
    ;

class_definition_list
    : class_definition_item {}
    | class_definition_list class_definition_item {}
    ;

empty_parens_rule
    : '(' ')' {}
    ;

func_decl_parameter_list
    : '(' parameter_decl_list ')' {}
    | empty_parens_rule {}
    ;

constructor_decl
    : CTOR func_decl_parameter_list {}
    ;

destructor_decl
    : DTOR {}
    ;

symbol_declaration
    : symbol_type {}
    | CONST symbol_type {}
    ;

struct_declaration
    : STRUCT SYMBOL '{' struct_body '}' {}
    | STRUCT SYMBOL '{' '}' {}
    ;

struct_body
    : symbol_declaration {}
    | struct_body symbol_declaration {}
    ;

method_declaration
    : type_definition SYMBOL func_decl_parameter_list {}
    ;

func_declaration
    : type_definition compound_name func_decl_parameter_list {}
    ;

parameter_def_list
    : symbol_declaration {}
    | parameter_def_list ',' symbol_declaration {}
    ;

parameter_decl_element
    : type_definition {}
    | CONST type_definition {}
    ;

parameter_decl_list
    : parameter_decl_element {}
    | parameter_decl_list ',' parameter_decl_element {}
    ;

array_initializer
    : '[' expression_list ']' {}
    ;

dict_init_item
    : expression {}
    | dict_initializer {}
    | array_initializer {}
    ;

dict_init_element
    : STRG ':' dict_init_item {}
    | compound_name ':' dict_init_item {}
    ;

dict_init_list
    : dict_init_element {}
    | dict_init_list ',' dict_init_element {}
    ;

dict_initializer
    : '[' dict_init_list ']' {}
    ;

initialzer
    : expression {}
    | array_initializer {}
    | dict_initializer {}
    ;

data_definition
    : symbol_declaration {}
    | symbol_declaration '=' initialzer {}
    ;

func_definition_parameter_list
    : '(' parameter_def_list ')' {}
    | empty_parens_rule {} {}
    ;

func_body_statement_list
    : func_body_statement {}
    | func_body_statement_list func_body_statement {}
    ;

func_body
    : '{' func_body_statement_list '}' {}
    | '{' '}' {}
    ;

func_definition
    : type_definition compound_name func_definition_parameter_list func_body {}
    | compound_name '.' CTOR func_definition_parameter_list func_body {}
    | compound_name '.' DTOR func_body {}
    ;

loop_body_statement
    : func_body_statement {}
    | BREAK {}
    | CONTINUE {}
    | YIELD {}
    ;

loop_body_statement_list
    : loop_body_statement {}
    | loop_body_statement_list loop_body_statement {}
    ;

loop_body
    : '{' loop_body_statement_list '}' {}
    | '{' '}' {}
    ;

except_clause
    : EXCEPT compound_name_in_parens_rule func_body {}
    ;

except_clause_intermediate_list
    : except_clause {}
    | except_clause_intermediate_list except_clause {}
    ;

except_clause_final
    : EXCEPT empty_parens_rule func_body {}
    | EXCEPT func_body {}
    ;

except_clause_list
    : except_clause_intermediate_list {}
    | except_clause_intermediate_list except_clause_final {}
    | except_clause_final {}
    ;

try_statement
    : TRY '{' func_body_statement_list '}' except_clause_list {}
    ;

    /* conflicts with else_clause_final when using
       the expression_in_parens_rule */
else_clause
    : ELSE '(' expression ')' {} func_body {}
    ;

else_clause_intermediate_list
    : else_clause {}
    | else_clause_intermediate_list else_clause {}
    ;

else_clause_final
    : ELSE empty_parens_rule func_body {}
    | ELSE func_body {}
    ;

else_clause_list
    : else_clause_intermediate_list {}
    | else_clause_intermediate_list else_clause_final {}
    | else_clause_final {}
    ;

if_clause
    : IF expression_in_parens_rule func_body {}
    ;

if_statement
    : if_clause {}
    | if_clause else_clause_list {}
    ;

for_statement
    : FOR '(' SYMBOL IN compound_name ')' loop_body {}
    | FOR empty_parens_rule loop_body {}
    | FOR loop_body {}
    ;

while_statement
    : WHILE expression_in_parens_rule loop_body {}
    | WHILE loop_body {}
    ;

case_clause
    : CASE constant_expression func_body {}
    ;

case_clause_intermediate_list
    : case_clause {}
    | case_clause_intermediate_list case_clause {}
    ;

case_clause_list
    : case_clause_intermediate_list  {}
    | case_clause_intermediate_list DEFAULT func_body  {}
    ;

switch_statement
    : SWITCH compound_name_in_parens_rule '{' case_clause_list '}'  {}
    ;

do_statement
    : DO loop_body WHILE expression_in_parens_rule {}
    ;

    /* This is num for array references. Dict references have a string.
    Other kinds of values are syntax error */
array_parameter
    : '[' expression_factor ']' {}
    | '[' array_parameter ']' {}
    ;

array_parameter_list
    : array_parameter {}
    | array_parameter_list array_parameter {}
    ;

class_definition_item
    : symbol_declaration {}
    | method_declaration {}
    | struct_declaration {}
    | scope_operator {}
    | constructor_decl {}
    | destructor_decl {}
    ;

module_item
    : class_definition {}
    | data_definition {}
    | func_definition {}
    | func_declaration {}
    | namespace_definition {}
    | struct_declaration {}
    | scope_operator {}
    | IMPORT STRG { openFile($2); }
    ;

func_body_statement
    : data_definition {}
    | compound_name '=' initialzer {}
    | if_statement {}
    | for_statement {}
    | while_statement {}
    | switch_statement {}
    | do_statement {}
    | try_statement {}
    | func_reference {}
    | TRACE {}
    | RETURN {}
    | RETURN expression_in_parens_rule {}
    | PRINT expression_in_parens_rule {}
    | EXIT '(' expression ')' {}
    | RAISE '(' expression ')' {}
    ;

%%

void yyerror(const char* s) {

    fprintf(stderr, "%s:%d:%d %s\n", get_file_name(), get_line_no(), get_col_no(), s);
    //error("%s", s);
}

const char* tokenToStr(int tok) {

    return yysymbol_name(YYTRANSLATE(tok));
}
